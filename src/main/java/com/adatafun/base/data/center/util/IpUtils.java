package com.adatafun.base.data.center.util;

import java.io.UnsupportedEncodingException;

/**
 * IP地址工具类
 *
 * @date: 2018/1/22 下午3:24
 * @author: ironc
 * @version: 1.0
 */
public final class IpUtils {

    /**
     * 判断IP地址的合法性，这里采用了正则表达式的方法来判断
     * return true，合法
     * */
    public static boolean check(String text) {
        if (text != null && !text.isEmpty()) {
            // 定义正则表达式
            String regex = "^(1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|[1-9])\\." +
            "(1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)\\." +
            "(1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)\\." +
            "(1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)$";
            // 判断ip地址是否与正则表达式匹配
            if (text.matches(regex)) {
                // 返回判断信息
                return true;
            } else {
                // 返回判断信息
                return false;
            }
        }
        return false;
    }

    public static void main(String[] args) throws UnsupportedEncodingException {
        System.out.println(check("192.168.1.122"));
        System.out.println(check("192.168.1.192"));
        System.out.println(check("192.168.1.199"));
        System.out.println(check("192.268.1.199"));
        System.out.println(check("192.255.1.199"));

        String ss = "123 34 97 105 114 112 111 114 116 67 111 100 101 34 58 34 67 65 78 34 44 34 97 105 114 112 111 114 116 78 97 109 101 34 58 34 229 185 191 229 183 158 231 153 189 228 186 145 229 155 189 233 153 133 230 156 186 229 156 186 34 44 34 97 105 114 112 111 114 116 82 97 105 108 119 97 121 73 100 34 58 54 48 44 34 98 111 97 114 100 71 97 116 101 34 58 34 65 49 34 44 34 98 117 115 105 110 101 115 115 72 111 117 114 115 34 58 34 48 54 58 48 48 32 45 32 50 50 58 48 48 34 44 34 99 111 118 101 114 73 109 103 34 58 91 34 104 116 116 112 58 47 47 102 115 45 112 117 98 108 105 99 46 111 115 115 45 99 110 45 104 97 110 103 122 104 111 117 46 97 108 105 121 117 110 99 115 46 99 111 109 47 97 105 114 112 111 114 116 99 108 111 117 100 47 98 97 115 101 45 105 110 102 111 47 115 104 111 112 47 52 55 55 57 54 48 52 48 50 53 57 45 48 55 45 49 56 45 49 49 51 52 52 52 46 106 112 101 103 34 93 44 34 105 100 34 58 51 46 51 56 57 48 48 57 101 43 48 54 44 34 105 109 103 85 114 108 34 58 91 93 44 34 108 111 99 97 116 105 111 110 71 117 105 100 97 110 99 101 34 58 34 228 184 141 231 159 165 233 129 147 228 189 141 231 189 174 34 44 34 114 101 108 101 118 97 110 116 82 117 108 101 34 58 34 49 227 128 129 228 188 152 230 131 160 229 136 184 228 184 141 230 148 175 230 140 129 229 133 145 230 141 162 231 142 176 233 135 145 46 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 50 227 128 129 233 190 153 232 133 190 229 135 186 232 161 140 228 191 157 231 149 153 229 175 185 230 156 172 228 188 152 230 131 160 229 136 184 232 167 132 229 136 153 231 154 132 232 167 163 233 135 138 230 157 131 46 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 34 44 34 115 101 99 117 114 105 116 121 66 101 102 111 114 101 79 114 65 102 116 101 114 34 58 34 229 174 137 230 163 128 229 137 141 34 44 34 115 104 111 112 67 111 100 101 34 58 34 84 67 48 48 48 49 34 44 34 115 104 111 112 68 101 115 99 114 105 112 116 105 111 110 34 58 34 34 44 34 115 104 111 112 75 105 110 100 34 58 34 75 84 86 34 44 34 115 104 111 112 78 97 109 101 34 58 34 230 181 139 232 175 149 229 186 151 233 147 186 239 188 140 232 175 183 229 139 191 230 147 141 228 189 156 34 44 34 115 104 111 112 83 99 111 100 101 34 58 34 84 54 48 48 49 34 44 34 115 104 111 112 83 116 97 116 101 34 58 49 44 34 115 104 111 112 83 116 121 108 101 34 58 34 231 142 176 228 187 163 34 44 34 115 104 111 112 84 121 112 101 34 58 34 120 105 117 120 105 97 110 34 44 34 116 101 108 101 112 104 111 110 101 34 58 34 49 53 56 56 56 56 56 56 56 56 56 34 44 34 116 101 114 109 105 110 97 108 78 97 109 101 34 58 34 84 52 49 34 44 34 123 92 34 98 111 97 114 100 71 97 116 101 92 34 58 92 34 65 49 92 34 44 92 34 98 117 115 105 110 101 115 115 72 111 117 114 115 92 34 58 92 34 48 54 58 48 48 32 45 32 50 50 58 48 48 92 34 44 92 34 105 109 103 85 114 108 92 34 58 91 93 44 92 34 108 111 99 97 116 105 111 110 71 117 105 100 97 110 99 101 92 34 58 92 34 228 184 141 231 159 165 233 129 147 228 189 141 231 189 174 92 34 44 92 34 114 101 108 101 118 97 110 116 82 117 108 101 92 34 58 92 34 49 227 128 129 228 188 152 230 131 160 229 136 184 228 184 141 230 148 175 230 140 129 229 133 145 230 141 162 231 142 176 233 135 145 46 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 50 227 128 129 233 190 153 232 133 190 229 135 186 232 161 140 228 191 157 231 149 153 229 175 185 230 156 172 228 188 152 230 131 160 229 136 184 232 167 132 229 136 153 231 154 132 232 167 163 233 135 138 230 157 131 46 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 92 34 44 92 34 115 101 99 117 114 105 116 121 66 101 102 111 114 101 79 114 65 102 116 101 114 92 34 58 92 34 229 174 137 230 163 128 229 137 141 92 34 44 92 34 115 104 111 112 67 111 100 101 92 34 58 92 34 84 67 48 48 48 49 92 34 44 92 34 115 104 111 112 68 101 115 99 114 105 112 116 105 111 110 92 34 58 92 34 92 34 44 92 34 115 104 111 112 78 97 109 101 92 34 58 92 34 230 181 139 232 175 149 229 186 151 233 147 186 239 188 140 232 175 183 229 139 191 230 147 141 228 189 156 92 34 44 92 34 115 104 111 112 83 116 97 116 101 92 34 58 49 44 92 34 115 104 111 112 83 116 121 108 101 92 34 58 92 34 231 142 176 228 187 163 92 34 44 92 34 115 104 111 112 84 121 112 101 92 34 58 92 34 120 105 117 120 105 97 110 92 34 44 92 34 116 101 108 101 112 104 111 110 101 92 34 58 92 34 49 53 56 56 56 56 56 56 56 56 56 92 34 44 92 34 116 101 114 109 105 110 97 108 78 97 109 101 92 34 58 92 34 84 52 49 92 34 44 92 34 97 105 114 112 111 114 116 78 97 109 101 92 34 58 92 34 229 185 191 229 183 158 231 153 189 228 186 145 229 155 189 233 153 133 230 156 186 229 156 186 92 34 44 92 34 97 105 114 112 111 114 116 82 97 105 108 119 97 121 73 100 92 34 58 54 48 44 92 34 97 105 114 112 111 114 116 67 111 100 101 92 34 58 92 34 67 65 78 92 34 44 92 34 105 100 92 34 58 51 51 56 57 48 48 57 44 92 34 99 111 118 101 114 73 109 103 92 34 58 91 92 34 104 116 116 112 58 47 47 102 115 45 112 117 98 108 105 99 46 111 115 115 45 99 110 45 104 97 110 103 122 104 111 117 46 97 108 105 121 117 110 99 115 46 99 111 109 47 97 105 114 112 111 114 116 99 108 111 117 100 47 98 97 115 101 45 105 110 102 111 47 115 104 111 112 47 52 55 55 57 54 48 52 48 50 53 57 45 48 55 45 49 56 45 49 49 51 52 52 52 46 106 112 101 103 92 34 93 44 92 34 115 104 111 112 83 99 111 100 101 92 34 58 92 34 84 54 48 48 49 92 34 44 92 34 115 104 111 112 75 105 110 100 92 34 58 92 34 75 84 86 92 34 125 34 58 34 34 125";
        StringBuilder sb = new StringBuilder();
        for (String s : ss.split(" ")) {
            sb.append(ascii(Integer.valueOf(s)));
        }
        System.out.println(sb.toString());
        String tt = "王者农药";

    }

    public static char ascii(int num) {
        return (char)num;
    }

}
